cmake_minimum_required(VERSION 3.10)

project(deque)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)

enable_testing()

include_directories(deque)
include_directories(support)
add_compile_definitions(TEST_STD_VER=23)
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_link_options(/NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/deque/natvis.natvis)
endif()

function(number_to_padded_string NUM TARGET_LENGTH OUTPUT_VAR)
    string(REPEAT "0" ${TARGET_LENGTH} LEADING_ZEROS)
    string(LENGTH "${NUM}" CURRENT_LENGTH)
    math(EXPR PAD_LENGTH "${TARGET_LENGTH} - ${CURRENT_LENGTH}")
    if(PAD_LENGTH GREATER 0)
        string(SUBSTRING "${LEADING_ZEROS}" 0 ${PAD_LENGTH} PADDING)
        set(${OUTPUT_VAR} "${PADDING}${NUM}" PARENT_SCOPE)
    else()
        set(${OUTPUT_VAR} "${NUM}" PARENT_SCOPE)
    endif()
endfunction()

file(GLOB_RECURSE cpp_sources CONFIGURE_DEPENDS std/containers/sequences/deque/*.cpp)
set(counter 0)
foreach(source_file IN LISTS cpp_sources)
    get_filename_component(target_ext ${source_file} EXT)
    get_filename_component(file_name ${source_file} NAME)
    if((NOT file_name STREQUAL "types.pass.cpp") AND (NOT counter EQUAL 27) AND (NOT counter EQUAL 30)) #27 30
        get_filename_component(target_name_wle ${source_file} NAME_WLE)
        file(RELATIVE_PATH target_directory ${CMAKE_CURRENT_SOURCE_DIR}/std/containers/sequences/deque ${source_file})
        string(REPLACE "/" "_" converted_path ${target_directory})
        string(REPLACE "deque." "" converted_path1 ${converted_path})
        string(REPLACE ".pass.cpp" "" converted_path2 ${converted_path1})
        number_to_padded_string(${counter} 2 counter_pad)
        set(target_name "${counter_pad}.${converted_path2}")
        if(target_ext STREQUAL ".pass.cpp" AND (NOT file_name STREQUAL "max_size.pass.cpp"))
            add_executable(${target_name} ${source_file})
            add_test(NAME ${target_name} COMMAND ${target_name})
        elseif(NOT target_ext STREQUAL ".verify.cpp")
            add_library(${target_name} STATIC ${source_file})
        endif()
    endif()
    math(EXPR counter "${counter} + 1")
endforeach()
